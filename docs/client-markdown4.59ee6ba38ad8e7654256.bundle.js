"use strict";(self.webpackChunk_guidebooks_playground=self.webpackChunk_guidebooks_playground||[]).push([[7149],{34264:(e,t,n)=>{n.r(t),n.d(t,{default:()=>r});const r='---\ntitle: Example &mdash; Iter8\nlayout:\n  1: left\n---\n\n# Iter8: Kubernetes Release Engineering\n\n[Iter8](https://iter8.tools) helps you safely roll out new versions of\napplications and ML models, and to maximize business value with each\nrelease.\n\n## How it Works\n\n- **[Install CLI](#kui-link-install-iter8-cli)** *blank* The `iter8` CLI gives\n  you an easy way to manage your experiments.\n- **[Download example](#kui-link-download-load-test)** *blank* You may\n  craft an experiment by hand, or, as we do here, you may use `iter8`\n  to download a previously constructed experiment definition.\n- **[Run experiment](#kui-link-run-experiment)** *blank*\n- **[Check experiment status](#kui-link-assert-success)** *blank*\n- **[Generate a report](#kui-link-generate-text-report)** *minor*\n\n---\n\n# Your First Experiment\n\n\n!!! tip "Load test https://example.com and validate SLOs" \n\n    Use an [Iter8 experiment](concepts.md#what-is-an-iter8-experiment) to load test https://example.com and validate latency and error-related service level objectives (SLOs).\n\n\n## 1. Install Iter8\n\n=== "Mac"\n\n    On macOS, [Homebrew](https://brew.sh) makes it easy to install the `iter8` CLI.\n\n    ```shell\n    ---\n    id: install-iter8-cli\n    validate: brew info iter8\n    ---\n    brew tap iter8-tools/iter8\n    brew install iter8\n    ```\n    \n=== "Go 1.16+"\n    Install Iter8 using [Go 1.16+](https://golang.org/) as follows.\n\n    ```shell\n    ---\n    id: install-iter8-cli\n    before: export PATH=~/${GOPATH-~/go}/bin:$PATH\n    validate: iter8 -v\n    ---\n    go install github.com/iter8-tools/iter8@latest\n    ```\n\n=== "Binaries"\n    Pre-compiled Iter8 binaries for many platforms are available [here](https://github.com/iter8-tools/iter8/releases). Uncompress the iter8-X-Y.tar.gz archive for your platform, and move the iter8 binary to any folder in your PATH.\n\n## 2. Download experiment\nDownload the `load-test` experiment folder from [Iter8 hub](../user-guide/topics/iter8hub.md) as follows.\n\n```shell\n---\nid: download-load-test\nvalidate: "[[ -f /tmp/load-test/values.yaml ]] && [[ -f /tmp/load-test/Chart.yaml ]] || exit 1"\nstatus: done\n---\ncd /tmp && iter8 hub -e load-test\n```\n\n## 3. Run experiment\n[Iter8 experiments](concepts.md#what-is-an-iter8-experiment) are specified using the `experiment.yaml` file. The `iter8 run` command reads this file, runs the specified experiment, and writes the results of the experiment into the `result.yaml` file.\n\nRun the experiment you downloaded above as follows.\n\n```shell\n---\nid: run-experiment\nvalidate: "[[ -f /tmp/load-test/experiment/values.yaml ]] || exit 1"\n---\ncd /tmp/load-test && iter8 run --set url=https://example.com\n```\n\n??? note "Look inside experiment.yaml"\n\n    This experiment contains the [`gen-load-and-collect-metrics` task](../user-guide/tasks/collect.md) for generating load and collecting metrics, and the [`assess-app-versions` task](../user-guide/tasks/assess.md) for validating SLOs.\n\n    ```yaml\n    # task 1: generate HTTP requests for https://example.com and\n    # collect Iter8\'s built-in latency and error-related metrics\n    - task: gen-load-and-collect-metrics\n      with:\n        versionInfo:\n        - url: https://example.com\n    # task 2: validate if the app (hosted at https://example.com) satisfies \n    # service level objectives (SLOs)\n    # this task uses the built-in metrics collected by task 1 for validation\n    - task: assess-app-versions\n      with:\n        SLOs:\n          # error rate must be 0\n        - metric: built-in/error-rate\n          upperLimit: 0\n          # 95th percentile latency must be under 100 msec\n        - metric: built-in/p95.0\n          upperLimit: 100\n    ```\n\n??? note "Iter8 and Helm"\n\n    If you are familiar with Helm, you probably noticed that the load-test folder resembles a Helm chart. This is because, Iter8 experiment charts are Helm charts under the covers. The iter8 run command used above combines the experiment chart with values to generate the experiments.yaml file, much like how Helm charts can be combined with values to produce Kubernetes manifests.\n\n## 4. Assert outcomes\nAssert that the experiment completed without any failures and SLOs are satisfied.\n\n```shell\n---\nid: assert-success\n---\ncd /tmp/load-test && iter8 assert -c completed -c nofailure -c slos\n```\n\n## 5. Generate report\nGenerate a report of the experiment in HTML or text formats as follows.\n\n=== "HTML"\n\n    ```shell\n    iter8 report -o html > report.html\n    # open report.html with a browser. In MacOS, you can use the command:\n    # open report.html\n    ```\n\n    ???+ note "The HTML report looks as follows"\n\n        ![HTML report](https://iter8.tools/0.8/getting-started/images/report.html.png)\n\n=== "Text"\n\n    ```shell\n    ---\n    id: generate-text-report\n    ---\n    cd /tmp/load-test && iter8 report -o text\n    ```\n\nCongratulations! :tada: You completed your first Iter8 experiment.\n'}}]);